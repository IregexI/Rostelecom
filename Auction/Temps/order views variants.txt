from django.shortcuts import render
from django.http import HttpResponse,HttpResponseRedirect
from django.contrib import messages
from .models import ShopCart,ShopCartForm
from django.contrib.auth.decorators import login_required
from home.models import Setting, ContactForm, ContactMessage
from product.models import Category, Product, Images,Comment, Variants
from user.models import UserProfile
from order.models import ShopCart, ShopCartForm, OrderForm, Order, OrderProduct
from django.utils.crypto import get_random_string
# Create your views here.
def index(request):
    return HttpResponse('Страница Order')

@login_required(login_url='/login')
def addtoshopcart(request,id):
    url = request.META.get('HTTP_REFERER')
    current_user = request.user
    checkproduct = ShopCart.objects.filter(product_id=id)
    profile = UserProfile.objects.get(user_id=current_user.id)
    product= Product.objects.get(pk=id)
    if product.variant !='None':
        variantid = request.POST.get('conf_select')
        if variantid == '0':
            messages.warning(request, 'Выберите конфигурацию!')
            return HttpResponseRedirect(url)
        checkinvariant = ShopCart.objects.filter(variant_id=variantid,
                                                 user_id=current_user.id)  # проверяем - есть ли такой вариант в корзине
        if checkinvariant:
            control = 1  # есть в корзине такой вариант
        else:
            control = 0  # нет варианта в корзине
    else: #если вариантов нет
        checkinproduct = ShopCart.objects.filter(product_id=id, user_id=current_user.id)
        if checkinproduct:
            control = 1 # есть в корзине такой товар без варианта
        else:
            control = 0 # нет товара в корзине

    if request.method == "POST":
        form = ShopCartForm(request.POST)
        current_user = request.user
        if form.is_valid():
            variantid = request.POST.get('conf_select')
            if control == 1: #Обновляем корзину
                if product.variant == 'None': #если нет вариантов у продукта - добавляем
                    data = ShopCart.objects.get(product_id=id, user_id=current_user.id)
                else:#иначе - еще проверяем по варианту
                    data = ShopCart.objects.get(product_id=id, variant_id=variantid, user_id=current_user.id)
                data.quantity += form.cleaned_data['quantity']
                data.save()
                messages.success(request, 'Корзина обновлена')
            else: #добавляем в корзину
                data=ShopCart()
                data.user_id = current_user.id
                data.product_id = id
                data.variant_id = variantid
                data.quantity = form.cleaned_data['quantity']
                data.save()
        messages.success(request,'Товар добавлен в корзину')
        return HttpResponseRedirect(url)
    else: #если это не РОST запрос - вариантов там нет, поэтому не запоминаем
        current_user = request.user
        if control ==1:
            data= ShopCart.objects.get(product_id=id,user_id=current_user.id)
            data.user_id = current_user.id
            data.product_id = id
            data.quantity +=1 #если еще раз ткнули добавить тот же товар
            data.save()
            messages.success(request, 'Корзина обновлена')
        else:
            data=ShopCart()
            data.user_id=current_user.id
            data.product_id = id
            data.quantity=1 #только 1 товар
            data.variant_id = None
            data.save()
            messages.success(request,'Товар добавлен в корзину')
        return HttpResponseRedirect(url)


# from home.models import Setting, ContactForm, ContactMessage
# from product.models import Category, Product, Images,Comment
def shopcart(request):
    current_user = request.user
    setting = Setting.objects.get(pk=1)
    category = Category.objects.all()
    shopcart = ShopCart.objects.filter(user_id=current_user.id)
    total = 0
    for s in shopcart:
        if s.product.variant =='None':
            total += s.product.price * s.quantity
        else:
            total += s.variant.price * s.quantity

    context = {'category': category,
               'shopcart': shopcart,
               'setting': setting,
               'total': total,
                }
    return render(request,'order/shopcart_products.html',context)


@login_required(login_url='/login')
def deletefromcart(request,id):
    shopcart = ShopCart.objects.filter(id=id).delete()
    messages.success(request,'Item was deleted from the Shopcart')
    return HttpResponseRedirect('/shopcart')


#from user.models import UserProfile

def orderproduct(request):
    current_user = request.user
    setting = Setting.objects.get(pk=1)
    category = Category.objects.all()
    shopcart = ShopCart.objects.filter(user_id=current_user.id)
    profile = UserProfile.objects.get(user_id=current_user.id)
    total = 0
    for s in shopcart:
        if s.product.variant =='None':
            total += s.product.price * s.quantity
        else:
            total += s.variant.price * s.quantity



    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            #Не забудьте проверить информацию о кредитной карте пользователя и возможности оплаты
            #на реальном проекте
            #Получаем информацию из формы пользователя
            data = Order()
            data.first_name = form.cleaned_data['first_name'] #get product quantity from form
            data.last_name = form.cleaned_data['last_name']
            data.address = form.cleaned_data['address']
            data.city = form.cleaned_data['city']
            data.phone = form.cleaned_data['phone']
            data.user_id = current_user.id
            data.total = total
            data.ip = request.META.get('REMOTE_ADDR')
            #случайная строка из 5 символов - код заказа
            ordercode = get_random_string(5).upper()
            data.code = ordercode
            data.save()

            #Далее - получаем информацию из корзины и перебираем товары
            #добавляем их в заказ, уменьшаем остатки на складе
            shopcart = ShopCart.objects.filter(user_id=current_user.id)
            for s in shopcart:
                detail = OrderProduct()
                detail.order_id = data.id  # ID заказа (сформировали случайно)
                detail.product_id = s.product_id #ID Товара
                detail.user_id = current_user.id #ID пользователя
                detail.quantity = s.quantity #количество
                detail.variant_id = s.variant_id
                if s.product.variant == "None":
                    detail.price = s.product.price #цена
                else:
                    detail.price = s.variant.price
                detail.amount = s.amount #итоговая сумма по этому товару
                detail.save()
                if s.product.variant == 'None': #если у товара нет вариатов
                    product = Product.objects.get(id=s.product_id)
                    product.amount -= s.quantity  # Уменьшаем количество товара
                    product.save() #сохраняем заказ в БД
                else: #если есть варианты - уменьшаем их остатки
                    variant = Variants.objects.get(id=s.product_id)
                    variant.amount -= s.quantity  # Уменьшаем количество товара
                    variant.save() #сохраняем заказ в БД
            # очищаем корзину после формирования заказа - удаляем из БД
            ShopCart.objects.filter(user_id=current_user.id).delete()
            request.session['cart_items'] = 0 #количество товаров в корзине - обнуляем
            messages.success(request, "Your Order has been completed. Thank you ")
            return render(request, 'order/order_complete.html', {'ordercode': ordercode, 'category': category})
        else: #на всякий случай вывод ошибок при валидации
            messages.warning(request, form.errors)
            return HttpResponseRedirect("/order/orderproduct")

    context = {'category': category,
               'shopcart': shopcart,
               'setting': setting,
               'total': total,
               'profile':profile,
               }
    return render(request, 'order/order_form.html', context)